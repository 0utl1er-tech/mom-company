// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: company/v1/company.proto

package companyv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/0utl1er-tech/mom-company/gen/pb/company/v1"
	v11 "github.com/0utl1er-tech/mom-company/gen/pb/staff/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// CompanyServiceName is the fully-qualified name of the CompanyService service.
	CompanyServiceName = "company.v1.CompanyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CompanyServiceCreateCompanyProcedure is the fully-qualified name of the CompanyService's
	// CreateCompany RPC.
	CompanyServiceCreateCompanyProcedure = "/company.v1.CompanyService/CreateCompany"
	// CompanyServiceGetCompanyProcedure is the fully-qualified name of the CompanyService's GetCompany
	// RPC.
	CompanyServiceGetCompanyProcedure = "/company.v1.CompanyService/GetCompany"
	// CompanyServiceListCompaniesProcedure is the fully-qualified name of the CompanyService's
	// ListCompanies RPC.
	CompanyServiceListCompaniesProcedure = "/company.v1.CompanyService/ListCompanies"
	// CompanyServiceCreateStaffProcedure is the fully-qualified name of the CompanyService's
	// CreateStaff RPC.
	CompanyServiceCreateStaffProcedure = "/company.v1.CompanyService/CreateStaff"
	// CompanyServiceUpdateStaffProcedure is the fully-qualified name of the CompanyService's
	// UpdateStaff RPC.
	CompanyServiceUpdateStaffProcedure = "/company.v1.CompanyService/UpdateStaff"
)

// CompanyServiceClient is a client for the company.v1.CompanyService service.
type CompanyServiceClient interface {
	CreateCompany(context.Context, *connect_go.Request[v1.CreateCompanyRequest]) (*connect_go.Response[v1.CreateCompanyResponse], error)
	GetCompany(context.Context, *connect_go.Request[v1.GetCompanyRequest]) (*connect_go.Response[v1.GetCompanyResponse], error)
	ListCompanies(context.Context, *connect_go.Request[v1.ListCompaniesRequest]) (*connect_go.Response[v1.ListCompaniesResponse], error)
	CreateStaff(context.Context, *connect_go.Request[v11.CreateStaffRequest]) (*connect_go.Response[v11.CreateStaffResponse], error)
	UpdateStaff(context.Context, *connect_go.Request[v11.UpdateStaffRequest]) (*connect_go.Response[v11.UpdateStaffResponse], error)
}

// NewCompanyServiceClient constructs a client for the company.v1.CompanyService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCompanyServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) CompanyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &companyServiceClient{
		createCompany: connect_go.NewClient[v1.CreateCompanyRequest, v1.CreateCompanyResponse](
			httpClient,
			baseURL+CompanyServiceCreateCompanyProcedure,
			opts...,
		),
		getCompany: connect_go.NewClient[v1.GetCompanyRequest, v1.GetCompanyResponse](
			httpClient,
			baseURL+CompanyServiceGetCompanyProcedure,
			opts...,
		),
		listCompanies: connect_go.NewClient[v1.ListCompaniesRequest, v1.ListCompaniesResponse](
			httpClient,
			baseURL+CompanyServiceListCompaniesProcedure,
			opts...,
		),
		createStaff: connect_go.NewClient[v11.CreateStaffRequest, v11.CreateStaffResponse](
			httpClient,
			baseURL+CompanyServiceCreateStaffProcedure,
			opts...,
		),
		updateStaff: connect_go.NewClient[v11.UpdateStaffRequest, v11.UpdateStaffResponse](
			httpClient,
			baseURL+CompanyServiceUpdateStaffProcedure,
			opts...,
		),
	}
}

// companyServiceClient implements CompanyServiceClient.
type companyServiceClient struct {
	createCompany *connect_go.Client[v1.CreateCompanyRequest, v1.CreateCompanyResponse]
	getCompany    *connect_go.Client[v1.GetCompanyRequest, v1.GetCompanyResponse]
	listCompanies *connect_go.Client[v1.ListCompaniesRequest, v1.ListCompaniesResponse]
	createStaff   *connect_go.Client[v11.CreateStaffRequest, v11.CreateStaffResponse]
	updateStaff   *connect_go.Client[v11.UpdateStaffRequest, v11.UpdateStaffResponse]
}

// CreateCompany calls company.v1.CompanyService.CreateCompany.
func (c *companyServiceClient) CreateCompany(ctx context.Context, req *connect_go.Request[v1.CreateCompanyRequest]) (*connect_go.Response[v1.CreateCompanyResponse], error) {
	return c.createCompany.CallUnary(ctx, req)
}

// GetCompany calls company.v1.CompanyService.GetCompany.
func (c *companyServiceClient) GetCompany(ctx context.Context, req *connect_go.Request[v1.GetCompanyRequest]) (*connect_go.Response[v1.GetCompanyResponse], error) {
	return c.getCompany.CallUnary(ctx, req)
}

// ListCompanies calls company.v1.CompanyService.ListCompanies.
func (c *companyServiceClient) ListCompanies(ctx context.Context, req *connect_go.Request[v1.ListCompaniesRequest]) (*connect_go.Response[v1.ListCompaniesResponse], error) {
	return c.listCompanies.CallUnary(ctx, req)
}

// CreateStaff calls company.v1.CompanyService.CreateStaff.
func (c *companyServiceClient) CreateStaff(ctx context.Context, req *connect_go.Request[v11.CreateStaffRequest]) (*connect_go.Response[v11.CreateStaffResponse], error) {
	return c.createStaff.CallUnary(ctx, req)
}

// UpdateStaff calls company.v1.CompanyService.UpdateStaff.
func (c *companyServiceClient) UpdateStaff(ctx context.Context, req *connect_go.Request[v11.UpdateStaffRequest]) (*connect_go.Response[v11.UpdateStaffResponse], error) {
	return c.updateStaff.CallUnary(ctx, req)
}

// CompanyServiceHandler is an implementation of the company.v1.CompanyService service.
type CompanyServiceHandler interface {
	CreateCompany(context.Context, *connect_go.Request[v1.CreateCompanyRequest]) (*connect_go.Response[v1.CreateCompanyResponse], error)
	GetCompany(context.Context, *connect_go.Request[v1.GetCompanyRequest]) (*connect_go.Response[v1.GetCompanyResponse], error)
	ListCompanies(context.Context, *connect_go.Request[v1.ListCompaniesRequest]) (*connect_go.Response[v1.ListCompaniesResponse], error)
	CreateStaff(context.Context, *connect_go.Request[v11.CreateStaffRequest]) (*connect_go.Response[v11.CreateStaffResponse], error)
	UpdateStaff(context.Context, *connect_go.Request[v11.UpdateStaffRequest]) (*connect_go.Response[v11.UpdateStaffResponse], error)
}

// NewCompanyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCompanyServiceHandler(svc CompanyServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	companyServiceCreateCompanyHandler := connect_go.NewUnaryHandler(
		CompanyServiceCreateCompanyProcedure,
		svc.CreateCompany,
		opts...,
	)
	companyServiceGetCompanyHandler := connect_go.NewUnaryHandler(
		CompanyServiceGetCompanyProcedure,
		svc.GetCompany,
		opts...,
	)
	companyServiceListCompaniesHandler := connect_go.NewUnaryHandler(
		CompanyServiceListCompaniesProcedure,
		svc.ListCompanies,
		opts...,
	)
	companyServiceCreateStaffHandler := connect_go.NewUnaryHandler(
		CompanyServiceCreateStaffProcedure,
		svc.CreateStaff,
		opts...,
	)
	companyServiceUpdateStaffHandler := connect_go.NewUnaryHandler(
		CompanyServiceUpdateStaffProcedure,
		svc.UpdateStaff,
		opts...,
	)
	return "/company.v1.CompanyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CompanyServiceCreateCompanyProcedure:
			companyServiceCreateCompanyHandler.ServeHTTP(w, r)
		case CompanyServiceGetCompanyProcedure:
			companyServiceGetCompanyHandler.ServeHTTP(w, r)
		case CompanyServiceListCompaniesProcedure:
			companyServiceListCompaniesHandler.ServeHTTP(w, r)
		case CompanyServiceCreateStaffProcedure:
			companyServiceCreateStaffHandler.ServeHTTP(w, r)
		case CompanyServiceUpdateStaffProcedure:
			companyServiceUpdateStaffHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCompanyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCompanyServiceHandler struct{}

func (UnimplementedCompanyServiceHandler) CreateCompany(context.Context, *connect_go.Request[v1.CreateCompanyRequest]) (*connect_go.Response[v1.CreateCompanyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("company.v1.CompanyService.CreateCompany is not implemented"))
}

func (UnimplementedCompanyServiceHandler) GetCompany(context.Context, *connect_go.Request[v1.GetCompanyRequest]) (*connect_go.Response[v1.GetCompanyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("company.v1.CompanyService.GetCompany is not implemented"))
}

func (UnimplementedCompanyServiceHandler) ListCompanies(context.Context, *connect_go.Request[v1.ListCompaniesRequest]) (*connect_go.Response[v1.ListCompaniesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("company.v1.CompanyService.ListCompanies is not implemented"))
}

func (UnimplementedCompanyServiceHandler) CreateStaff(context.Context, *connect_go.Request[v11.CreateStaffRequest]) (*connect_go.Response[v11.CreateStaffResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("company.v1.CompanyService.CreateStaff is not implemented"))
}

func (UnimplementedCompanyServiceHandler) UpdateStaff(context.Context, *connect_go.Request[v11.UpdateStaffRequest]) (*connect_go.Response[v11.UpdateStaffResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("company.v1.CompanyService.UpdateStaff is not implemented"))
}
