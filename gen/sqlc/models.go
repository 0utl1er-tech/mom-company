// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type Presuf string

const (
	PresufPrefix Presuf = "prefix"
	PresufSuffix Presuf = "suffix"
)

func (e *Presuf) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Presuf(s)
	case string:
		*e = Presuf(s)
	default:
		return fmt.Errorf("unsupported scan type for Presuf: %T", src)
	}
	return nil
}

type NullPresuf struct {
	Presuf Presuf `json:"presuf"`
	Valid  bool   `json:"valid"` // Valid is true if Presuf is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPresuf) Scan(value interface{}) error {
	if value == nil {
		ns.Presuf, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Presuf.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPresuf) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Presuf), nil
}

type Type string

const (
	TypeKabu  Type = "kabu"
	TypeYugen Type = "yugen"
	TypeGodo  Type = "godo"
	TypeGoshi Type = "goshi"
	TypeGomei Type = "gomei"
	TypeOther Type = "other"
)

func (e *Type) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Type(s)
	case string:
		*e = Type(s)
	default:
		return fmt.Errorf("unsupported scan type for Type: %T", src)
	}
	return nil
}

type NullType struct {
	Type  Type `json:"type"`
	Valid bool `json:"valid"` // Valid is true if Type is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullType) Scan(value interface{}) error {
	if value == nil {
		ns.Type, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Type.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Type), nil
}

type Company struct {
	ID uuid.UUID `json:"id"`
	// 商標
	Trademark string `json:"trademark"`
	Type      Type   `json:"type"`
	// 前株か後株か
	Position Presuf `json:"position"`
	Address  string `json:"address"`
	// 法人番号
	CompanyCode string    `json:"company_code"`
	ContactID   uuid.UUID `json:"contact_id"`
	CreatedAt   time.Time `json:"created_at"`
}

type Contact struct {
	ID        uuid.UUID `json:"id"`
	Email     string    `json:"email"`
	Phone     string    `json:"phone"`
	CreatedAt time.Time `json:"created_at"`
}

type Staff struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
	// 役職
	Role      string    `json:"role"`
	ContactID uuid.UUID `json:"contact_id"`
	CompanyID uuid.UUID `json:"company_id"`
	CreatedAt time.Time `json:"created_at"`
}
