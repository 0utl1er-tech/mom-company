// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: company.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createCompany = `-- name: CreateCompany :one
INSERT INTO company (id, ceo, trademark, type, position, address, company_code)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, ceo, trademark, type, position, address, company_code, contact_id, created_at
`

type CreateCompanyParams struct {
	ID          uuid.UUID `json:"id"`
	Ceo         uuid.UUID `json:"ceo"`
	Trademark   string    `json:"trademark"`
	Type        Type      `json:"type"`
	Position    Presuf    `json:"position"`
	Address     string    `json:"address"`
	CompanyCode string    `json:"company_code"`
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) (Company, error) {
	row := q.db.QueryRow(ctx, createCompany,
		arg.ID,
		arg.Ceo,
		arg.Trademark,
		arg.Type,
		arg.Position,
		arg.Address,
		arg.CompanyCode,
	)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Ceo,
		&i.Trademark,
		&i.Type,
		&i.Position,
		&i.Address,
		&i.CompanyCode,
		&i.ContactID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCompany = `-- name: DeleteCompany :exec
DELETE FROM company
WHERE id = $1
`

func (q *Queries) DeleteCompany(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCompany, id)
	return err
}

const getCompany = `-- name: GetCompany :one
SELECT id, ceo, trademark, type, position, address, company_code, contact_id, created_at FROM company
WHERE id = $1
`

func (q *Queries) GetCompany(ctx context.Context, id uuid.UUID) (Company, error) {
	row := q.db.QueryRow(ctx, getCompany, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Ceo,
		&i.Trademark,
		&i.Type,
		&i.Position,
		&i.Address,
		&i.CompanyCode,
		&i.ContactID,
		&i.CreatedAt,
	)
	return i, err
}

const updateCompany = `-- name: UpdateCompany :one
UPDATE company 
SET 
  trademark = $2,
  type = $3,
  position = $4, 
  address = $5, 
  company_code = $6
WHERE id = $1
RETURNING id, ceo, trademark, type, position, address, company_code, contact_id, created_at
`

type UpdateCompanyParams struct {
	ID          uuid.UUID `json:"id"`
	Trademark   string    `json:"trademark"`
	Type        Type      `json:"type"`
	Position    Presuf    `json:"position"`
	Address     string    `json:"address"`
	CompanyCode string    `json:"company_code"`
}

func (q *Queries) UpdateCompany(ctx context.Context, arg UpdateCompanyParams) (Company, error) {
	row := q.db.QueryRow(ctx, updateCompany,
		arg.ID,
		arg.Trademark,
		arg.Type,
		arg.Position,
		arg.Address,
		arg.CompanyCode,
	)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Ceo,
		&i.Trademark,
		&i.Type,
		&i.Position,
		&i.Address,
		&i.CompanyCode,
		&i.ContactID,
		&i.CreatedAt,
	)
	return i, err
}
