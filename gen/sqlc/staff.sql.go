// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: staff.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createStaff = `-- name: CreateStaff :one
INSERT INTO staff (id, name, role, contact_id, company_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, role, contact_id, company_id, created_at
`

type CreateStaffParams struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Role      string    `json:"role"`
	ContactID uuid.UUID `json:"contact_id"`
	CompanyID uuid.UUID `json:"company_id"`
}

func (q *Queries) CreateStaff(ctx context.Context, arg CreateStaffParams) (Staff, error) {
	row := q.db.QueryRow(ctx, createStaff,
		arg.ID,
		arg.Name,
		arg.Role,
		arg.ContactID,
		arg.CompanyID,
	)
	var i Staff
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Role,
		&i.ContactID,
		&i.CompanyID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteStaff = `-- name: DeleteStaff :exec
DELETE FROM staff
WHERE id = $1
`

func (q *Queries) DeleteStaff(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteStaff, id)
	return err
}

const getStaff = `-- name: GetStaff :one
SELECT id, name, role, contact_id, company_id, created_at FROM staff
WHERE id = $1
`

func (q *Queries) GetStaff(ctx context.Context, id uuid.UUID) (Staff, error) {
	row := q.db.QueryRow(ctx, getStaff, id)
	var i Staff
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Role,
		&i.ContactID,
		&i.CompanyID,
		&i.CreatedAt,
	)
	return i, err
}

const listStaff = `-- name: ListStaff :many
SELECT 
  s.id, s.name, s.role, s.contact_id, s.company_id, s.created_at,
  c.email as contact_email, c.phone as contact_phone
FROM staff s
LEFT JOIN contact c ON s.contact_id = c.id
WHERE s.company_id = $1
`

type ListStaffRow struct {
	ID           uuid.UUID   `json:"id"`
	Name         string      `json:"name"`
	Role         string      `json:"role"`
	ContactID    uuid.UUID   `json:"contact_id"`
	CompanyID    uuid.UUID   `json:"company_id"`
	CreatedAt    time.Time   `json:"created_at"`
	ContactEmail pgtype.Text `json:"contact_email"`
	ContactPhone pgtype.Text `json:"contact_phone"`
}

func (q *Queries) ListStaff(ctx context.Context, companyID uuid.UUID) ([]ListStaffRow, error) {
	rows, err := q.db.Query(ctx, listStaff, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListStaffRow{}
	for rows.Next() {
		var i ListStaffRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Role,
			&i.ContactID,
			&i.CompanyID,
			&i.CreatedAt,
			&i.ContactEmail,
			&i.ContactPhone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStaff = `-- name: UpdateStaff :one
UPDATE staff
SET name = $2, role = $3, contact_id = $4
WHERE id = $1
RETURNING id, name, role, contact_id, company_id, created_at
`

type UpdateStaffParams struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Role      string    `json:"role"`
	ContactID uuid.UUID `json:"contact_id"`
}

func (q *Queries) UpdateStaff(ctx context.Context, arg UpdateStaffParams) (Staff, error) {
	row := q.db.QueryRow(ctx, updateStaff,
		arg.ID,
		arg.Name,
		arg.Role,
		arg.ContactID,
	)
	var i Staff
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Role,
		&i.ContactID,
		&i.CompanyID,
		&i.CreatedAt,
	)
	return i, err
}

const updateStaffCompany = `-- name: UpdateStaffCompany :one
UPDATE staff
SET company_id = $2
WHERE id = $1
RETURNING id, name, role, contact_id, company_id, created_at
`

type UpdateStaffCompanyParams struct {
	ID        uuid.UUID `json:"id"`
	CompanyID uuid.UUID `json:"company_id"`
}

func (q *Queries) UpdateStaffCompany(ctx context.Context, arg UpdateStaffCompanyParams) (Staff, error) {
	row := q.db.QueryRow(ctx, updateStaffCompany, arg.ID, arg.CompanyID)
	var i Staff
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Role,
		&i.ContactID,
		&i.CompanyID,
		&i.CreatedAt,
	)
	return i, err
}
