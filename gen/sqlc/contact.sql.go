// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: contact.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createContact = `-- name: CreateContact :one
INSERT INTO contact (id, email, phone)
VALUES ($1, $2, $3)
RETURNING id, email, phone, created_at
`

type CreateContactParams struct {
	ID    uuid.UUID `json:"id"`
	Email string    `json:"email"`
	Phone string    `json:"phone"`
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (Contact, error) {
	row := q.db.QueryRow(ctx, createContact, arg.ID, arg.Email, arg.Phone)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
	)
	return i, err
}

const deleteContact = `-- name: DeleteContact :exec
DELETE FROM contact
WHERE id = $1
`

func (q *Queries) DeleteContact(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteContact, id)
	return err
}

const getContact = `-- name: GetContact :one
SELECT id, email, phone, created_at FROM contact
WHERE id = $1
`

func (q *Queries) GetContact(ctx context.Context, id uuid.UUID) (Contact, error) {
	row := q.db.QueryRow(ctx, getContact, id)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
	)
	return i, err
}

const listContact = `-- name: ListContact :many
SELECT id, email, phone, created_at FROM contact
WHERE id = $1
`

func (q *Queries) ListContact(ctx context.Context, id uuid.UUID) ([]Contact, error) {
	rows, err := q.db.Query(ctx, listContact, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Contact{}
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Phone,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContact = `-- name: UpdateContact :one
UPDATE contact
SET email = $2, phone = $3
WHERE id = $1
RETURNING id, email, phone, created_at
`

type UpdateContactParams struct {
	ID    uuid.UUID `json:"id"`
	Email string    `json:"email"`
	Phone string    `json:"phone"`
}

func (q *Queries) UpdateContact(ctx context.Context, arg UpdateContactParams) (Contact, error) {
	row := q.db.QueryRow(ctx, updateContact, arg.ID, arg.Email, arg.Phone)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
	)
	return i, err
}
